# SPDX-FileCopyrightText: 2023 - 2024 Nikita Chernyi
# SPDX-FileCopyrightText: 2023 - 2025 Slavi Pantaleev
# SPDX-FileCopyrightText: 2024 Kian Foroodi
# SPDX-FileCopyrightText: 2024 Sergio Durigan Junior
# SPDX-FileCopyrightText: 2025 MASH project contributors
# SPDX-FileCopyrightText: 2025 Suguru Hirahara
#
# SPDX-License-Identifier: AGPL-3.0-or-later

---
# Project source code URL: https://github.com/distribution/distribution/

docker_registry_enabled: false

docker_registry_identifier: container-registry
docker_registry_base_path: "/registry"
docker_registry_data_dir_path: "{{ docker_registry_base_path }}/data"
docker_registry_bin_path: "{{ docker_registry_base_path }}/bin"

# renovate: datasource=docker depName=registry versioning=semver
docker_registry_version: 2.8.3

docker_registry_uid: ''
docker_registry_gid: ''

# The fully-qualified name of your Container Registry server (e.g. `registry.example.com`)
docker_registry_hostname: ''

# Intentionally leaving this blank, instead of defaulting it to `docker_registry_hostname`, to avoid specifying a hostname
# which could render other services on that hostname potentially unreachable.
# See: https://github.com/mother-of-all-self-hosting/mash-playbook/issues/391
docker_registry_container_hostname: ''

docker_registry_container_image: "{{ docker_registry_container_image_registry_prefix }}registry:{{ docker_registry_container_image_tag }}"
docker_registry_container_image_tag: "{{ docker_registry_version }}"
docker_registry_container_image_registry_prefix: "{{ docker_registry_container_image_registry_prefix_upstream }}"
docker_registry_container_image_registry_prefix_upstream: "{{ docker_registry_container_image_registry_prefix_upstream_default }}"
docker_registry_container_image_registry_prefix_upstream_default: docker.io/
docker_registry_container_image_force_pull: "{{ docker_registry_container_image.endswith(':latest') }}"

# docker_registry_container_http_bind_port controls whether (and how) the container
# exposes its HTTP port (`docker_registry_config_rocket_port`).
# Leave empty to not expose it.
# Example values: `127.0.0.1:8080`, `0.0.0.0:8080`, `8080`.
docker_registry_container_http_bind_port: ''

# The base container network. It will be auto-created by this role if it doesn't exist already.
docker_registry_container_network: "{{ docker_registry_identifier }}"

# A list of additional container networks that the container would be connected to.
# The playbook does not create these networks, so make sure they already exist.
docker_registry_container_additional_networks: "{{ docker_registry_container_additional_networks_auto + docker_registry_container_additional_networks_custom }}"
docker_registry_container_additional_networks_auto: []
docker_registry_container_additional_networks_custom: []

# docker_registry_container_labels_traefik_enabled controls whether labels to assist a Traefik reverse-proxy will be attached to the container.
# See `../templates/labels.j2` for details.
#
# To inject your own other container labels, see `docker_registry_container_labels_additional_labels`.
docker_registry_container_labels_traefik_enabled: true
docker_registry_container_labels_traefik_docker_network: ''
docker_registry_container_labels_traefik_rule_public: "Host(`{{ docker_registry_hostname }}`) && (Method(`GET`) || Method(`HEAD`))"
docker_registry_container_labels_traefik_rule_private: "Host(`{{ docker_registry_hostname }}`) && (Method(`POST`) || Method(`PUT`) || Method(`DELETE`) || Method(`PATCH`))"
docker_registry_container_labels_traefik_entrypoints: web-secure
docker_registry_container_labels_traefik_tls: "{{ docker_registry_container_labels_traefik_entrypoints != 'web' }}"
docker_registry_container_labels_traefik_tls_certResolver: default  # noqa var-naming

# docker_registry_container_labels_additional_labels contains a multiline string with additional labels to add to the container label file.
# See `../templates/labels.j2` for details.
#
# Example:
# docker_registry_container_labels_additional_labels: |
#   my.label=1
#   another.label="here"
docker_registry_container_labels_additional_labels: ''

# List of systemd services that the Container Registry systemd service depends on
docker_registry_systemd_required_services_list: "{{ docker_registry_systemd_required_services_list_default + docker_registry_systemd_required_services_list_auto + docker_registry_systemd_required_services_list_custom }}"
docker_registry_systemd_required_services_list_default: "{{ [devture_systemd_docker_base_docker_service_name] if devture_systemd_docker_base_docker_service_name else [] }}"
docker_registry_systemd_required_services_list_auto: []
docker_registry_systemd_required_services_list_custom: []

# List of systemd services that the Container Registry systemd service wants
docker_registry_systemd_wanted_services_list: []

# docker_registry_private_services_whitelisted_ip_ranges contains a list of whitelisted IP ranges
# which can access private services (pushing new images, deleting images, etc.)
docker_registry_private_services_whitelisted_ip_ranges: []

# docker_registry_storage_delete_enabled enables the deletion of image blobs and manifests by digest.
# Controls `REGISTRY_STORAGE_DELETE_ENABLED`
# See: https://docs.docker.com/registry/configuration/#delete
docker_registry_storage_delete_enabled: false

# docker_registry_garbage_collect_schedule contains a systemd OnCalendar definition which controls how often `registry-gargage-collect.timer` runs
docker_registry_garbage_collect_schedule: 'Sunday *-*-* 08:30:00'

# docker_registry_garbage_collect_dry_run controls if --dry-run=true is passed to the garbage collection command
docker_registry_garbage_collect_dry_run: false

# docker_registry_garbage_collect_stop_service_enabled controls if the Registry service will be stopped while garbage collection is being done.
# For smaller registries, this may be the safer thing to do.
# For larger ones, fully stopping the registry can cause too much downtime.
docker_registry_garbage_collect_stop_service_enabled: false

# Command to run at the start of garbage collection
docker_registry_garbage_collect_command_pre: ''

# Command to run at the end of garbage collection
docker_registry_garbage_collect_command_post: ''

# docker_registry_container_additional_environment_variables contains a multiline string with additional environment variables to pass to the container.
#
# Example:
# docker_registry_container_additional_environment_variables: |
#   VAR=1
#   ANOTHER=value
docker_registry_container_additional_environment_variables: ''
